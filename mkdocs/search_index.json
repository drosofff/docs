{
    "docs": [
        {
            "location": "/", 
            "text": "GitHub Documentation", 
            "title": "Home"
        }, 
        {
            "location": "/#github-documentation", 
            "text": "", 
            "title": "GitHub Documentation"
        }, 
        {
            "location": "/mkdocs_publishing/", 
            "text": "How to easily publish a report or documentation using mkdocs in GitHub\n\n\n\n\nCreate a new repository on your GitHub account. You can seed it with a README.txt file\n\n\nClone this repository locally\n\n\nLocally (in the master branch):\n\n\ncreate an mkdocs.yml file similar to this \nfile\n\n\ncreate a docs subdirectory where you .md markdown files will go\n\n\nadd, commit and push to the origin/master of the remote GitHub report\n\n\ninstall mkdocs \npip install mkdocs\n\n\nAnd build your html remote site in your gh-branch using the command\n\nmkdocs gh-deploy -c -m \"\ncommit message\n\"\n\n\nYou are done !\n\n\n\n\n\n\n\n\nAfterward\n\n\nYou just work locally in your master branch, commit and push your .md and .yml files in your master branch, and using mkdocs gh-deploy to synchronize your remote gh-pages branch.\n\n\nsee locally the web docs\n\n\nStill in your master branch, run \nmkdocs serve\n and see locally your documentation with your web browser\n\n\nAutomatize the doc build with travis\n\n\n\n\nActivate the Travis service for the GitHub repo\n\n\nCreate a personal access token in the \npersonal GitHub settings\n\n\ncopy\n this token in a safe place and before closing the window give it the \nappropriate\n rights in reading/writing repos or branch\n\n\ninstall Travis locally client using\n\n\n\n\nsudo gem install travis -v 1.8.2 --no-rdoc --no-ri # ruby has to be installed\n\n\n\n\n\n\nlint the .travis.yml file wich is present at the root of the master branch of this repo using \ntravis lint\n\n\nadd or change the encrypted token in this file by\n\n\n\n\ntravis encrypt GH_TOKEN=\nthe toked created above and copied\n --add\n\n\n\n\nThis add a \nsecure\n variable in the \nenv\nsection\nsee this \ndocumentation\n for more info\n- testing this on an IFB instance\n- copy both the valid .travis.yml and deploy.sh in the root on the master branch of the repo.\n\n\nThis worked for me, but of course the important part is to adapt these settings to your personal token.\n\n\noctober 14th. Testing the automated deployment in gh-pages", 
            "title": "Create this documentation"
        }, 
        {
            "location": "/mkdocs_publishing/#how-to-easily-publish-a-report-or-documentation-using-mkdocs-in-github", 
            "text": "Create a new repository on your GitHub account. You can seed it with a README.txt file  Clone this repository locally  Locally (in the master branch):  create an mkdocs.yml file similar to this  file  create a docs subdirectory where you .md markdown files will go  add, commit and push to the origin/master of the remote GitHub report  install mkdocs  pip install mkdocs  And build your html remote site in your gh-branch using the command mkdocs gh-deploy -c -m \" commit message \"  You are done !", 
            "title": "How to easily publish a report or documentation using mkdocs in GitHub"
        }, 
        {
            "location": "/mkdocs_publishing/#afterward", 
            "text": "You just work locally in your master branch, commit and push your .md and .yml files in your master branch, and using mkdocs gh-deploy to synchronize your remote gh-pages branch.", 
            "title": "Afterward"
        }, 
        {
            "location": "/mkdocs_publishing/#see-locally-the-web-docs", 
            "text": "Still in your master branch, run  mkdocs serve  and see locally your documentation with your web browser", 
            "title": "see locally the web docs"
        }, 
        {
            "location": "/mkdocs_publishing/#automatize-the-doc-build-with-travis", 
            "text": "Activate the Travis service for the GitHub repo  Create a personal access token in the  personal GitHub settings  copy  this token in a safe place and before closing the window give it the  appropriate  rights in reading/writing repos or branch  install Travis locally client using   sudo gem install travis -v 1.8.2 --no-rdoc --no-ri # ruby has to be installed   lint the .travis.yml file wich is present at the root of the master branch of this repo using  travis lint  add or change the encrypted token in this file by   travis encrypt GH_TOKEN= the toked created above and copied  --add  This add a  secure  variable in the  env section\nsee this  documentation  for more info\n- testing this on an IFB instance\n- copy both the valid .travis.yml and deploy.sh in the root on the master branch of the repo.  This worked for me, but of course the important part is to adapt these settings to your personal token.  october 14th. Testing the automated deployment in gh-pages", 
            "title": "Automatize the doc build with travis"
        }, 
        {
            "location": "/test_M2/", 
            "text": "Test (M2 level)\n\n\n\n\n\n\nIf it does not already exists, set up a GitHub account (https://github.com), and create a public repository for this test\n\n\nSet up a Local Galaxy server instance (galaxyproject.org) on your personal computer and log in to the server using a web browser. Provide a short memo of what you have done to complete this part 2. Thus, everyone can redo it. Please put this memo in your created public test repo.\n\n\nManipulate the Local server so that the home page of the local galaxy instance is changed (welcome message or anything). Clue: \"$GalaxyRoot/static/welcome.html\". Provide a screenshot of the change (in put the image in your public repo)\n\n\nWrite a python script that\n\n\ntakes in input any Fasta file\n\n\nreturns in a \"results\" file a) the number of sequences in the file b) a tabular list of sequences name \\t sequence length\n\n\nImportant: develop the script in your public GitHub repository from start (so that we can inspect commits)\n\n\n\n\n\n\n\n\nResults\n\n\n\n\nJust provide by mail the URL of the GitHub repository containing the following items\n\n\n\n\nthe memo (in 2)\n\n\nthe screenshot (in 3)\n\n\nThe python code (in 4)", 
            "title": "M2 test"
        }, 
        {
            "location": "/annuaire/", 
            "text": "Annuaire\n\n\nChristophe Antoniewski\n\n\nPlate-Forme ARTbio\n\n\nInstitut de Biologie Paris Seine\n\n\nBarre Cassan, 7\u00e8me \u00e9tage, pi\u00e8ce 725\n\n\n\n\ntel 01 44 27 70 05\n\n\nemail christophe.antoniewski@upmc.fr\n\n\n\n\nSt\u00e9phane Le Crom", 
            "title": "annuaire"
        }, 
        {
            "location": "/annuaire/#annuaire", 
            "text": "", 
            "title": "Annuaire"
        }, 
        {
            "location": "/annuaire/#christophe-antoniewski", 
            "text": "Plate-Forme ARTbio  Institut de Biologie Paris Seine  Barre Cassan, 7\u00e8me \u00e9tage, pi\u00e8ce 725   tel 01 44 27 70 05  email christophe.antoniewski@upmc.fr", 
            "title": "Christophe Antoniewski"
        }, 
        {
            "location": "/annuaire/#stephane-le-crom", 
            "text": "", 
            "title": "St\u00e9phane Le Crom"
        }
    ]
}